# This file was generated by liblab | https://liblab.com/

from typing import Awaitable, Union, List
from .utils.to_async import to_async
from ..meanings import MeaningsService
from ...models.utils.sentinel import SENTINEL
from ...models import Meaning


class MeaningsServiceAsync(MeaningsService):
    """
    Async Wrapper for MeaningsServiceAsync
    """

    def new(
        self, init: Union[str, None] = SENTINEL, collection: Union[str, None] = SENTINEL
    ) -> Awaitable[any]:
        return to_async(super().new)(init, collection)

    def get(self, name: str, collection: Union[str, None] = SENTINEL) -> Awaitable[str]:
        return to_async(super().get)(name, collection)

    def set(
        self,
        name: str,
        value: Union[str, None] = SENTINEL,
        collection: Union[str, None] = SENTINEL,
    ) -> Awaitable[any]:
        return to_async(super().set)(name, value, collection)

    def add(
        self,
        name: str,
        value: Union[str, None] = SENTINEL,
        collection: Union[str, None] = SENTINEL,
    ) -> Awaitable[any]:
        return to_async(super().add)(name, value, collection)

    def all(
        self, name: Union[str, None] = SENTINEL, collection: Union[str, None] = SENTINEL
    ) -> Awaitable[List[Meaning]]:
        return to_async(super().all)(name, collection)

    def update(
        self, request_body: List[Meaning], collection: Union[str, None] = SENTINEL
    ) -> Awaitable[any]:
        return to_async(super().update)(request_body, collection)

    def remove(
        self,
        name: Union[str, None] = SENTINEL,
        value: Union[str, None] = SENTINEL,
        collection: Union[str, None] = SENTINEL,
    ) -> Awaitable[any]:
        return to_async(super().remove)(name, value, collection)

    def display(
        self,
        name: Union[str, None] = SENTINEL,
        collection: Union[str, None] = SENTINEL,
        format: Union[str, None] = SENTINEL,
    ) -> Awaitable[any]:
        return to_async(super().display)(name, collection, format)

# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.sentinel import SENTINEL


@JsonMap({"type_": "type"})
class MenuItem(BaseModel):
    """MenuItem

    :param name: name
    :type name: str
    :param value: value, defaults to None
    :type value: str, optional
    :param type_: type_, defaults to None
    :type type_: str, optional
    :param target: target, defaults to None
    :type target: str, optional
    """

    def __init__(
        self,
        name: str,
        value: Union[str, None] = SENTINEL,
        type_: Union[str, None] = SENTINEL,
        target: Union[str, None] = SENTINEL,
        **kwargs
    ):
        """MenuItem

        :param name: name
        :type name: str
        :param value: value, defaults to None
        :type value: str, optional
        :param type_: type_, defaults to None
        :type type_: str, optional
        :param target: target, defaults to None
        :type target: str, optional
        """
        self.name = name
        if value is not SENTINEL:
            self.value = self._define_str("value", value, nullable=True)
        if type_ is not SENTINEL:
            self.type_ = self._define_str("type_", type_, nullable=True)
        if target is not SENTINEL:
            self.target = self._define_str("target", target, nullable=True)
        self._kwargs = kwargs

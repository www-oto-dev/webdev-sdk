# This file was generated by liblab | https://liblab.com/

from typing import List, Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.environment.environment import Environment
from ..models.utils.sentinel import SENTINEL
from ..models.utils.cast_models import cast_models
from ..models import Property


class PropertiesService(BaseService):

    @cast_models
    def new(
        self, init: Union[str, None] = SENTINEL, build: Union[str, None] = SENTINEL
    ) -> str:
        """Create new build (default or specified settings)

        :param init: init, defaults to None
        :type init: str, optional
        :param build: build, defaults to None
        :type build: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: str
        """

        Validator(str).is_optional().is_nullable().validate(init)
        Validator(str).is_optional().is_nullable().validate(build)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/properties/revision/new",
                [self.get_api_key()],
            )
            .add_query("init", init, nullable=True)
            .add_query("build", build, nullable=True)
            .serialize()
            .set_method("PUT")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def get(self, name: str, build: Union[str, None] = SENTINEL) -> str:
        """Obtain the lastest value for formula with specified 'name'

        :param name: name
        :type name: str
        :param build: build, defaults to None
        :type build: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: str
        """

        Validator(str).validate(name)
        Validator(str).is_optional().is_nullable().validate(build)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/properties/actual/get",
                [self.get_api_key()],
            )
            .add_query("name", name)
            .add_query("build", build, nullable=True)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def set(
        self,
        name: str,
        value: Union[str, None] = SENTINEL,
        build: Union[str, None] = SENTINEL,
    ) -> any:
        """Remove all previous values for specified 'name' and add a new value

        :param name: name
        :type name: str
        :param value: value, defaults to None
        :type value: str, optional
        :param build: build, defaults to None
        :type build: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).validate(name)
        Validator(str).is_optional().is_nullable().validate(value)
        Validator(str).is_optional().is_nullable().validate(build)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/properties/actual/set",
                [self.get_api_key()],
            )
            .add_query("name", name)
            .add_query("value", value, nullable=True)
            .add_query("build", build, nullable=True)
            .serialize()
            .set_method("PUT")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def add(
        self,
        name: str,
        value: Union[str, None] = SENTINEL,
        build: Union[str, None] = SENTINEL,
    ) -> any:
        """Add a new value for specified 'name'

        :param name: name
        :type name: str
        :param value: value, defaults to None
        :type value: str, optional
        :param build: build, defaults to None
        :type build: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).validate(name)
        Validator(str).is_optional().is_nullable().validate(value)
        Validator(str).is_optional().is_nullable().validate(build)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/properties/actual/add",
                [self.get_api_key()],
            )
            .add_query("name", name)
            .add_query("value", value, nullable=True)
            .add_query("build", build, nullable=True)
            .serialize()
            .set_method("PUT")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def all(
        self, name: Union[str, None] = SENTINEL, build: Union[str, None] = SENTINEL
    ) -> List[Property]:
        """Obtain a list of all properties with specified 'name'

        :param name: name, defaults to None
        :type name: str, optional
        :param build: build, defaults to None
        :type build: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[Property]
        """

        Validator(str).is_optional().is_nullable().validate(name)
        Validator(str).is_optional().is_nullable().validate(build)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/properties/all/get",
                [self.get_api_key()],
            )
            .add_query("name", name, nullable=True)
            .add_query("build", build, nullable=True)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [Property._unmap(item) for item in response]

    @cast_models
    def update(
        self, request_body: List[Property], build: Union[str, None] = SENTINEL
    ) -> any:
        """Remove previously set and add new properties with specified 'name' fileds with values from 'values' fileds of provided list

        :param request_body: The request body.
        :type request_body: List[Property]
        :param build: build, defaults to None
        :type build: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(Property).is_array().validate(request_body)
        Validator(str).is_optional().is_nullable().validate(build)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/properties/all/update",
                [self.get_api_key()],
            )
            .add_query("build", build, nullable=True)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def remove(
        self,
        name: Union[str, None] = SENTINEL,
        value: Union[str, None] = SENTINEL,
        build: Union[str, None] = SENTINEL,
    ) -> any:
        """Remove all values for specified 'name'

        :param name: name, defaults to None
        :type name: str, optional
        :param value: value, defaults to None
        :type value: str, optional
        :param build: build, defaults to None
        :type build: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).is_optional().is_nullable().validate(name)
        Validator(str).is_optional().is_nullable().validate(value)
        Validator(str).is_optional().is_nullable().validate(build)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/properties/all/remove",
                [self.get_api_key()],
            )
            .add_query("name", name, nullable=True)
            .add_query("value", value, nullable=True)
            .add_query("build", build, nullable=True)
            .serialize()
            .set_method("DELETE")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def display(
        self,
        name: Union[str, None] = SENTINEL,
        build: Union[str, None] = SENTINEL,
        format: Union[str, None] = SENTINEL,
    ) -> any:
        """Display a list of all properties with specified 'name'

        :param name: name, defaults to None
        :type name: str, optional
        :param build: build, defaults to None
        :type build: str, optional
        :param format: format, defaults to None
        :type format: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).is_optional().is_nullable().validate(name)
        Validator(str).is_optional().is_nullable().validate(build)
        Validator(str).is_optional().is_nullable().validate(format)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/properties/all/display",
                [self.get_api_key()],
            )
            .add_query("name", name, nullable=True)
            .add_query("build", build, nullable=True)
            .add_query("format", format, nullable=True)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

# This file was generated by liblab | https://liblab.com/

from typing import List, Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.environment.environment import Environment
from ..models.utils.sentinel import SENTINEL
from ..models.utils.cast_models import cast_models
from ..models import Project


class AdminService(BaseService):

    @cast_models
    def projects(self) -> List[Project]:
        """Obtain a list of all projects [ADMIN RIGHTS REQUIRED]

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: List[Project]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/admin/projects/all",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return [Project._unmap(item) for item in response]

    @cast_models
    def new_project(
        self,
        title: Union[str, None] = SENTINEL,
        slug: Union[str, None] = SENTINEL,
        init: Union[str, None] = SENTINEL,
        internal: Union[bool, None] = SENTINEL,
    ) -> bool:
        """Create project [ADMIN RIGHTS REQUIRED]

        :param title: title, defaults to None
        :type title: str, optional
        :param slug: slug, defaults to None
        :type slug: str, optional
        :param init: init, defaults to None
        :type init: str, optional
        :param internal: internal, defaults to None
        :type internal: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: bool
        """

        Validator(str).is_optional().is_nullable().validate(title)
        Validator(str).is_optional().is_nullable().validate(slug)
        Validator(str).is_optional().is_nullable().validate(init)
        Validator(bool).is_optional().is_nullable().validate(internal)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/admin/projects/new",
                [self.get_api_key()],
            )
            .add_query("title", title, nullable=True)
            .add_query("slug", slug, nullable=True)
            .add_query("init", init, nullable=True)
            .add_query("internal", internal, nullable=True)
            .serialize()
            .set_method("PUT")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def remove_project(
        self,
        slug: Union[str, None] = SENTINEL,
        uid: Union[str, None] = SENTINEL,
        internal: Union[bool, None] = SENTINEL,
    ) -> any:
        """Remove project with specified ID [ADMIN RIGHTS REQUIRED]

        :param slug: slug, defaults to None
        :type slug: str, optional
        :param uid: uid, defaults to None
        :type uid: str, optional
        :param internal: internal, defaults to None
        :type internal: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).is_optional().is_nullable().validate(slug)
        Validator(str).is_optional().is_nullable().validate(uid)
        Validator(bool).is_optional().is_nullable().validate(internal)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/admin/projects/remove",
                [self.get_api_key()],
            )
            .add_query("slug", slug, nullable=True)
            .add_query("uid", uid, nullable=True)
            .add_query("internal", internal, nullable=True)
            .serialize()
            .set_method("DELETE")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def change_project(
        self,
        slug: Union[str, None] = SENTINEL,
        uid: Union[str, None] = SENTINEL,
        new_slug: Union[str, None] = SENTINEL,
        new_title: Union[str, None] = SENTINEL,
        internal: Union[bool, None] = SENTINEL,
    ) -> any:
        """Change options [ADMIN RIGHTS REQUIRED]

        :param slug: slug, defaults to None
        :type slug: str, optional
        :param uid: uid, defaults to None
        :type uid: str, optional
        :param new_slug: new_slug, defaults to None
        :type new_slug: str, optional
        :param new_title: new_title, defaults to None
        :type new_title: str, optional
        :param internal: internal, defaults to None
        :type internal: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).is_optional().is_nullable().validate(slug)
        Validator(str).is_optional().is_nullable().validate(uid)
        Validator(str).is_optional().is_nullable().validate(new_slug)
        Validator(str).is_optional().is_nullable().validate(new_title)
        Validator(bool).is_optional().is_nullable().validate(internal)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/admin/projects/change",
                [self.get_api_key()],
            )
            .add_query("slug", slug, nullable=True)
            .add_query("uid", uid, nullable=True)
            .add_query("new_slug", new_slug, nullable=True)
            .add_query("new_title", new_title, nullable=True)
            .add_query("internal", internal, nullable=True)
            .serialize()
            .set_method("PUT")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def change_project_slug(
        self,
        slug: Union[str, None] = SENTINEL,
        uid: Union[str, None] = SENTINEL,
        new_slug: Union[str, None] = SENTINEL,
        internal: Union[bool, None] = SENTINEL,
    ) -> any:
        """Change project slug [ADMIN RIGHTS REQUIRED]

        :param slug: slug, defaults to None
        :type slug: str, optional
        :param uid: uid, defaults to None
        :type uid: str, optional
        :param new_slug: new_slug, defaults to None
        :type new_slug: str, optional
        :param internal: internal, defaults to None
        :type internal: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).is_optional().is_nullable().validate(slug)
        Validator(str).is_optional().is_nullable().validate(uid)
        Validator(str).is_optional().is_nullable().validate(new_slug)
        Validator(bool).is_optional().is_nullable().validate(internal)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/admin/projects/change/slug",
                [self.get_api_key()],
            )
            .add_query("slug", slug, nullable=True)
            .add_query("uid", uid, nullable=True)
            .add_query("new_slug", new_slug, nullable=True)
            .add_query("internal", internal, nullable=True)
            .serialize()
            .set_method("PUT")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def change_project_title(
        self,
        slug: Union[str, None] = SENTINEL,
        uid: Union[str, None] = SENTINEL,
        new_title: Union[str, None] = SENTINEL,
        internal: Union[bool, None] = SENTINEL,
    ) -> any:
        """Change project title [ADMIN RIGHTS REQUIRED]

        :param slug: slug, defaults to None
        :type slug: str, optional
        :param uid: uid, defaults to None
        :type uid: str, optional
        :param new_title: new_title, defaults to None
        :type new_title: str, optional
        :param internal: internal, defaults to None
        :type internal: bool, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        Validator(str).is_optional().is_nullable().validate(slug)
        Validator(str).is_optional().is_nullable().validate(uid)
        Validator(str).is_optional().is_nullable().validate(new_title)
        Validator(bool).is_optional().is_nullable().validate(internal)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/admin/projects/change/title",
                [self.get_api_key()],
            )
            .add_query("slug", slug, nullable=True)
            .add_query("uid", uid, nullable=True)
            .add_query("new_title", new_title, nullable=True)
            .add_query("internal", internal, nullable=True)
            .serialize()
            .set_method("PUT")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

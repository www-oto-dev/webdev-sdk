// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { Project, projectResponse } from '../common/project';
import {
  ChangeProjectParams,
  ChangeProjectSlugParams,
  ChangeProjectTitleParams,
  NewProjectParams,
  RemoveProjectParams,
} from './request-params';

export class AdminService extends BaseService {
  /**
   * Obtain a list of all projects [ADMIN RIGHTS REQUIRED]
   * @returns {Promise<HttpResponse<Project[]>>} Successful Response
   */
  async projects(requestConfig?: RequestConfig): Promise<HttpResponse<Project[]>> {
    const request = new RequestBuilder<Project[]>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/admin/projects/all')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(projectResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<Project[]>(request);
  }

  /**
   * Create project [ADMIN RIGHTS REQUIRED]
   * @param {string} [title] -
   * @param {string} [slug] -
   * @param {string} [init] -
   * @param {boolean} [internal] -
   * @returns {Promise<HttpResponse<boolean>>} Successful Response
   */
  async newProject(params?: NewProjectParams, requestConfig?: RequestConfig): Promise<HttpResponse<boolean>> {
    const request = new RequestBuilder<boolean>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('PUT')
      .setPath('/admin/projects/new')
      .setRequestSchema(z.any())
      .setResponseSchema(z.boolean())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'title',
        value: params?.title,
      })
      .addQueryParam({
        key: 'slug',
        value: params?.slug,
      })
      .addQueryParam({
        key: 'init',
        value: params?.init,
      })
      .addQueryParam({
        key: 'internal',
        value: params?.internal,
      })
      .build();
    return this.client.call<boolean>(request);
  }

  /**
   * Remove project with specified ID [ADMIN RIGHTS REQUIRED]
   * @param {string} [slug] -
   * @param {string} [uid] -
   * @param {boolean} [internal] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async removeProject(params?: RemoveProjectParams, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('DELETE')
      .setPath('/admin/projects/remove')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'slug',
        value: params?.slug,
      })
      .addQueryParam({
        key: 'uid',
        value: params?.uid,
      })
      .addQueryParam({
        key: 'internal',
        value: params?.internal,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Change options [ADMIN RIGHTS REQUIRED]
   * @param {string} [slug] -
   * @param {string} [uid] -
   * @param {string} [newSlug] -
   * @param {string} [newTitle] -
   * @param {boolean} [internal] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async changeProject(params?: ChangeProjectParams, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('PUT')
      .setPath('/admin/projects/change')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'slug',
        value: params?.slug,
      })
      .addQueryParam({
        key: 'uid',
        value: params?.uid,
      })
      .addQueryParam({
        key: 'new_slug',
        value: params?.newSlug,
      })
      .addQueryParam({
        key: 'new_title',
        value: params?.newTitle,
      })
      .addQueryParam({
        key: 'internal',
        value: params?.internal,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Change project slug [ADMIN RIGHTS REQUIRED]
   * @param {string} [slug] -
   * @param {string} [uid] -
   * @param {string} [newSlug] -
   * @param {boolean} [internal] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async changeProjectSlug(params?: ChangeProjectSlugParams, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('PUT')
      .setPath('/admin/projects/change/slug')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'slug',
        value: params?.slug,
      })
      .addQueryParam({
        key: 'uid',
        value: params?.uid,
      })
      .addQueryParam({
        key: 'new_slug',
        value: params?.newSlug,
      })
      .addQueryParam({
        key: 'internal',
        value: params?.internal,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Change project title [ADMIN RIGHTS REQUIRED]
   * @param {string} [slug] -
   * @param {string} [uid] -
   * @param {string} [newTitle] -
   * @param {boolean} [internal] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async changeProjectTitle(
    params?: ChangeProjectTitleParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('PUT')
      .setPath('/admin/projects/change/title')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'slug',
        value: params?.slug,
      })
      .addQueryParam({
        key: 'uid',
        value: params?.uid,
      })
      .addQueryParam({
        key: 'new_title',
        value: params?.newTitle,
      })
      .addQueryParam({
        key: 'internal',
        value: params?.internal,
      })
      .build();
    return this.client.call<any>(request);
  }
}

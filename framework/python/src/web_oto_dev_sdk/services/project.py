# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.environment.environment import Environment
from ..models.utils.sentinel import SENTINEL
from ..models.utils.cast_models import cast_models
from ..models import HttpValidationError, ProjectInfo


class ProjectService(BaseService):

    @cast_models
    def info(self) -> ProjectInfo:
        """Obtain project information

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: ProjectInfo
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/project/info",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        return ProjectInfo._unmap(response)

    @cast_models
    def collect(self) -> None:
        """collect

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/project/collect",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("POST")
        )

        response, status, _ = self.send_request(serialized_request)

    @cast_models
    def generate(self) -> None:
        """generate

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/project/generate",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("POST")
        )

        response, status, _ = self.send_request(serialized_request)

    @cast_models
    def build(self) -> None:
        """build

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/project/build",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("POST")
        )

        response, status, _ = self.send_request(serialized_request)

    @cast_models
    def view(self) -> str:
        """view

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: str
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/project/view",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("POST")
        )

        response, status, content = self.send_request(serialized_request)
        return response

    @cast_models
    def imagine(self, target: Union[str, None] = SENTINEL) -> None:
        """imagine

        :param target: target, defaults to None
        :type target: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: None
        """

        Validator(str).is_optional().is_nullable().validate(target)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/project/imagine",
                [self.get_api_key()],
            )
            .add_query("target", target, nullable=True)
            .add_error(422, HttpValidationError)
            .serialize()
            .set_method("POST")
        )

        response, status, content = self.send_request(serialized_request)

    @cast_models
    def info_1(self) -> ProjectInfo:
        """Obtain project information

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: ProjectInfo
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/api/v1/project/info",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("GET")
        )

        response, status, content = self.send_request(serialized_request)
        return ProjectInfo._unmap(response)

    @cast_models
    def collect_1(self) -> None:
        """collect

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/api/v1/project/collect",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("POST")
        )

        response, status, _ = self.send_request(serialized_request)

    @cast_models
    def generate_1(self) -> None:
        """generate

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/api/v1/project/generate",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("POST")
        )

        response, status, _ = self.send_request(serialized_request)

    @cast_models
    def build_1(self) -> None:
        """build

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/api/v1/project/build",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("POST")
        )

        response, status, _ = self.send_request(serialized_request)

    @cast_models
    def view_1(self) -> str:
        """view

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: str
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/api/v1/project/view",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("POST")
        )

        response, status, content = self.send_request(serialized_request)
        return response

    @cast_models
    def imagine_1(self, target: Union[str, None] = SENTINEL) -> None:
        """imagine

        :param target: target, defaults to None
        :type target: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: None
        """

        Validator(str).is_optional().is_nullable().validate(target)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/api/v1/project/imagine",
                [self.get_api_key()],
            )
            .add_query("target", target, nullable=True)
            .add_error(422, HttpValidationError)
            .serialize()
            .set_method("POST")
        )

        response, status, content = self.send_request(serialized_request)

// This file was generated by liblab | https://liblab.com/

package v0

import (
	"context"
	restClient "github.com/swagger-api/swagger-petstore/internal/clients/rest"
	"github.com/swagger-api/swagger-petstore/internal/clients/rest/httptransport"
	"github.com/swagger-api/swagger-petstore/internal/configmanager"
	"github.com/swagger-api/swagger-petstore/pkg/shared"
	"github.com/swagger-api/swagger-petstore/pkg/webdevsdkconfig"
	"time"
)

type V0Service struct {
	manager *configmanager.ConfigManager
}

func NewV0Service(manager *configmanager.ConfigManager) *V0Service {
	return &V0Service{
		manager: manager,
	}
}

func (api *V0Service) getConfig() *webdevsdkconfig.Config {
	return api.manager.GetV0()
}

func (api *V0Service) SetBaseUrl(baseUrl string) {
	config := api.getConfig()
	config.SetBaseUrl(baseUrl)
}

func (api *V0Service) SetTimeout(timeout time.Duration) {
	config := api.getConfig()
	config.SetTimeout(timeout)
}

func (api *V0Service) SetAccessToken(accessToken string) {
	config := api.getConfig()
	config.SetAccessToken(accessToken)
}

func (api *V0Service) ReadRootV0AdminGet(ctx context.Context) (*shared.WebdevSdkResponse[[]byte], *shared.WebdevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("GET").
		WithPath("/v0/admin/").
		WithConfig(config).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebdevSdkError[[]byte](err)
	}

	return shared.NewWebdevSdkResponse[[]byte](resp), nil
}

func (api *V0Service) ReadRootV0AdminProjectsGet(ctx context.Context) (*shared.WebdevSdkResponse[[]byte], *shared.WebdevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("GET").
		WithPath("/v0/admin/projects").
		WithConfig(config).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebdevSdkError[[]byte](err)
	}

	return shared.NewWebdevSdkResponse[[]byte](resp), nil
}

func (api *V0Service) ReadRootV0ControlGet(ctx context.Context) (*shared.WebdevSdkResponse[[]byte], *shared.WebdevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("GET").
		WithPath("/v0/control/").
		WithConfig(config).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebdevSdkError[[]byte](err)
	}

	return shared.NewWebdevSdkResponse[[]byte](resp), nil
}

func (api *V0Service) ReadRootV0ControlProjectsGet(ctx context.Context) (*shared.WebdevSdkResponse[[]byte], *shared.WebdevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("GET").
		WithPath("/v0/control/projects").
		WithConfig(config).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebdevSdkError[[]byte](err)
	}

	return shared.NewWebdevSdkResponse[[]byte](resp), nil
}

func (api *V0Service) ReadRootV0ProjectGet(ctx context.Context) (*shared.WebdevSdkResponse[[]byte], *shared.WebdevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("GET").
		WithPath("/v0/project/").
		WithConfig(config).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebdevSdkError[[]byte](err)
	}

	return shared.NewWebdevSdkResponse[[]byte](resp), nil
}

func (api *V0Service) ReadRootV0ProjectproperiesSetPut(ctx context.Context) (*shared.WebdevSdkResponse[[]byte], *shared.WebdevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("PUT").
		WithPath("/v0/projectproperies/set").
		WithConfig(config).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebdevSdkError[[]byte](err)
	}

	return shared.NewWebdevSdkResponse[[]byte](resp), nil
}

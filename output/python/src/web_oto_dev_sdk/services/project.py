# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import Project


class ProjectService(BaseService):

    @cast_models
    def get(self, pid: str = None) -> Project:
        """Obtain project information by ID

        :param pid: pid, defaults to None
        :type pid: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: Project
        """

        Validator(str).is_optional().validate(pid)

        serialized_request = (
            Serializer(f"{self.base_url}/project/get", self.get_default_headers())
            .add_query("pid", pid, nullable=True)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return Project._unmap(response)

    @cast_models
    def collect(self, pid: str = None) -> any:
        """collect

        :param pid: pid, defaults to None
        :type pid: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: any
        """

        Validator(str).is_optional().validate(pid)

        serialized_request = (
            Serializer(f"{self.base_url}/project/collect", self.get_default_headers())
            .add_query("pid", pid, nullable=True)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def generate(self, pid: str = None) -> any:
        """generate

        :param pid: pid, defaults to None
        :type pid: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: any
        """

        Validator(str).is_optional().validate(pid)

        serialized_request = (
            Serializer(f"{self.base_url}/project/generate", self.get_default_headers())
            .add_query("pid", pid, nullable=True)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def build(self, pid: str = None) -> any:
        """build

        :param pid: pid, defaults to None
        :type pid: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: any
        """

        Validator(str).is_optional().validate(pid)

        serialized_request = (
            Serializer(f"{self.base_url}/project/build", self.get_default_headers())
            .add_query("pid", pid, nullable=True)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)
        return response

    @cast_models
    def view(self, pid: str = None) -> Project:
        """view

        :param pid: pid, defaults to None
        :type pid: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: Project
        """

        Validator(str).is_optional().validate(pid)

        serialized_request = (
            Serializer(f"{self.base_url}/project/view", self.get_default_headers())
            .add_query("pid", pid, nullable=True)
            .serialize()
            .set_method("POST")
        )

        response = self.send_request(serialized_request)
        return Project._unmap(response)

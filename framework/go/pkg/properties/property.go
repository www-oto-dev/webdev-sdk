// This file was generated by liblab | https://liblab.com/

package properties

import (
	"encoding/json"
)

type Property struct {
	Name    *string `json:"name,omitempty" required:"true"`
	Value   *string `json:"value,omitempty"`
	touched map[string]bool
}

func (p *Property) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *Property) SetName(name string) {
	if p.touched == nil {
		p.touched = map[string]bool{}
	}
	p.touched["Name"] = true
	p.Name = &name
}

func (p *Property) SetNameNil() {
	if p.touched == nil {
		p.touched = map[string]bool{}
	}
	p.touched["Name"] = true
	p.Name = nil
}

func (p *Property) GetValue() *string {
	if p == nil {
		return nil
	}
	return p.Value
}

func (p *Property) SetValue(value string) {
	if p.touched == nil {
		p.touched = map[string]bool{}
	}
	p.touched["Value"] = true
	p.Value = &value
}

func (p *Property) SetValueNil() {
	if p.touched == nil {
		p.touched = map[string]bool{}
	}
	p.touched["Value"] = true
	p.Value = nil
}
func (p Property) MarshalJSON() ([]byte, error) {
	data := make(map[string]any)

	if p.touched["Name"] && p.Name == nil {
		data["name"] = nil
	} else if p.Name != nil {
		data["name"] = p.Name
	}

	if p.touched["Value"] && p.Value == nil {
		data["value"] = nil
	} else if p.Value != nil {
		data["value"] = p.Value
	}

	return json.Marshal(data)
}

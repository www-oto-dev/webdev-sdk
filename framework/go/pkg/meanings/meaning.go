// This file was generated by liblab | https://liblab.com/

package meanings

import (
	"encoding/json"
)

type Meaning struct {
	Name    *string `json:"name,omitempty" required:"true"`
	Value   *string `json:"value,omitempty"`
	touched map[string]bool
}

func (m *Meaning) GetName() *string {
	if m == nil {
		return nil
	}
	return m.Name
}

func (m *Meaning) SetName(name string) {
	if m.touched == nil {
		m.touched = map[string]bool{}
	}
	m.touched["Name"] = true
	m.Name = &name
}

func (m *Meaning) SetNameNil() {
	if m.touched == nil {
		m.touched = map[string]bool{}
	}
	m.touched["Name"] = true
	m.Name = nil
}

func (m *Meaning) GetValue() *string {
	if m == nil {
		return nil
	}
	return m.Value
}

func (m *Meaning) SetValue(value string) {
	if m.touched == nil {
		m.touched = map[string]bool{}
	}
	m.touched["Value"] = true
	m.Value = &value
}

func (m *Meaning) SetValueNil() {
	if m.touched == nil {
		m.touched = map[string]bool{}
	}
	m.touched["Value"] = true
	m.Value = nil
}
func (m Meaning) MarshalJSON() ([]byte, error) {
	data := make(map[string]any)

	if m.touched["Name"] && m.Name == nil {
		data["name"] = nil
	} else if m.Name != nil {
		data["name"] = m.Name
	}

	if m.touched["Value"] && m.Value == nil {
		data["value"] = nil
	} else if m.Value != nil {
		data["value"] = m.Value
	}

	return json.Marshal(data)
}

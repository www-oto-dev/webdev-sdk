// This file was generated by liblab | https://liblab.com/

package admin

import (
	"context"
	restClient "github.com/swagger-api/swagger-petstore/internal/clients/rest"
	"github.com/swagger-api/swagger-petstore/internal/clients/rest/httptransport"
	"github.com/swagger-api/swagger-petstore/internal/configmanager"
	"github.com/swagger-api/swagger-petstore/pkg/shared"
	"github.com/swagger-api/swagger-petstore/pkg/webotodevsdkconfig"
	"time"
)

type AdminService struct {
	manager *configmanager.ConfigManager
}

func NewAdminService(manager *configmanager.ConfigManager) *AdminService {
	return &AdminService{
		manager: manager,
	}
}

func (api *AdminService) getConfig() *webotodevsdkconfig.Config {
	return api.manager.GetAdmin()
}

func (api *AdminService) SetBaseUrl(baseUrl string) {
	config := api.getConfig()
	config.SetBaseUrl(baseUrl)
}

func (api *AdminService) SetTimeout(timeout time.Duration) {
	config := api.getConfig()
	config.SetTimeout(timeout)
}

func (api *AdminService) SetApiKey(apiKey string) {
	config := api.getConfig()
	config.SetApiKey(apiKey)
}

// Obtain a list of all projects [ADMIN RIGHTS REQUIRED]
func (api *AdminService) Projects(ctx context.Context) (*shared.WebOtoDevSdkResponse[[]shared.Project], *shared.WebOtoDevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("GET").
		WithPath("/admin/projects/all").
		WithConfig(config).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]shared.Project](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebOtoDevSdkError[[]shared.Project](err)
	}

	return shared.NewWebOtoDevSdkResponse[[]shared.Project](resp), nil
}

// Create project [ADMIN RIGHTS REQUIRED]
func (api *AdminService) NewProject(ctx context.Context, params NewProjectRequestParams) (*shared.WebOtoDevSdkResponse[bool], *shared.WebOtoDevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("PUT").
		WithPath("/admin/projects/new").
		WithConfig(config).
		WithOptions(params).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[bool](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebOtoDevSdkError[bool](err)
	}

	return shared.NewWebOtoDevSdkResponse[bool](resp), nil
}

// Remove project with specified ID [ADMIN RIGHTS REQUIRED]
func (api *AdminService) RemoveProject(ctx context.Context, params RemoveProjectRequestParams) (*shared.WebOtoDevSdkResponse[[]byte], *shared.WebOtoDevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("DELETE").
		WithPath("/admin/projects/remove").
		WithConfig(config).
		WithOptions(params).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebOtoDevSdkError[[]byte](err)
	}

	return shared.NewWebOtoDevSdkResponse[[]byte](resp), nil
}

// Change options [ADMIN RIGHTS REQUIRED]
func (api *AdminService) ChangeProject(ctx context.Context, params ChangeProjectRequestParams) (*shared.WebOtoDevSdkResponse[[]byte], *shared.WebOtoDevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("PUT").
		WithPath("/admin/projects/change").
		WithConfig(config).
		WithOptions(params).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebOtoDevSdkError[[]byte](err)
	}

	return shared.NewWebOtoDevSdkResponse[[]byte](resp), nil
}

// Change project slug [ADMIN RIGHTS REQUIRED]
func (api *AdminService) ChangeProjectSlug(ctx context.Context, params ChangeProjectSlugRequestParams) (*shared.WebOtoDevSdkResponse[[]byte], *shared.WebOtoDevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("PUT").
		WithPath("/admin/projects/change/slug").
		WithConfig(config).
		WithOptions(params).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebOtoDevSdkError[[]byte](err)
	}

	return shared.NewWebOtoDevSdkResponse[[]byte](resp), nil
}

// Change project title [ADMIN RIGHTS REQUIRED]
func (api *AdminService) ChangeProjectTitle(ctx context.Context, params ChangeProjectTitleRequestParams) (*shared.WebOtoDevSdkResponse[[]byte], *shared.WebOtoDevSdkError) {
	config := *api.getConfig()

	request := httptransport.NewRequestBuilder().WithContext(ctx).
		WithMethod("PUT").
		WithPath("/admin/projects/change/title").
		WithConfig(config).
		WithOptions(params).
		WithContentType(httptransport.ContentTypeJson).
		WithResponseContentType(httptransport.ContentTypeJson).
		Build()

	client := restClient.NewRestClient[[]byte](config)
	resp, err := client.Call(*request)
	if err != nil {
		return nil, shared.NewWebOtoDevSdkError[[]byte](err)
	}

	return shared.NewWebOtoDevSdkResponse[[]byte](resp), nil
}

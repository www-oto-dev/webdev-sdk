// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import {
  AddParams,
  AllParams,
  DisplayParams,
  Get_Params,
  New_Params,
  RemoveParams,
  Set_Params,
  UpdateParams,
} from './request-params';
import { Meaning, meaningRequest, meaningResponse } from './models/meaning';

export class MeaningsService extends BaseService {
  /**
   * Create new collection (default or specified settings)
   * @param {string} [init] -
   * @param {string} [collection] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async new_(params?: New_Params, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('PUT')
      .setPath('/meanings/revision/new')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'init',
        value: params?.init,
      })
      .addQueryParam({
        key: 'collection',
        value: params?.collection,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Obtain the lastest value for meaning with specified 'name'
   * @param {string} name -
   * @param {string} [collection] -
   * @returns {Promise<HttpResponse<string>>} Successful Response
   */
  async get_(params: Get_Params, requestConfig?: RequestConfig): Promise<HttpResponse<string>> {
    const request = new RequestBuilder<string>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/meanings/actual/get')
      .setRequestSchema(z.any())
      .setResponseSchema(z.string())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'name',
        value: params?.name,
      })
      .addQueryParam({
        key: 'collection',
        value: params?.collection,
      })
      .build();
    return this.client.call<string>(request);
  }

  /**
   * Remove all previous values for specified 'name' and add a new value
   * @param {string} name -
   * @param {string} [value] -
   * @param {string} [collection] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async set_(params: Set_Params, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('PUT')
      .setPath('/meanings/actual/set')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'name',
        value: params?.name,
      })
      .addQueryParam({
        key: 'value',
        value: params?.value,
      })
      .addQueryParam({
        key: 'collection',
        value: params?.collection,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Add a new value for specified 'name'
   * @param {string} name -
   * @param {string} [value] -
   * @param {string} [collection] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async add(params: AddParams, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('PUT')
      .setPath('/meanings/actual/add')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'name',
        value: params?.name,
      })
      .addQueryParam({
        key: 'value',
        value: params?.value,
      })
      .addQueryParam({
        key: 'collection',
        value: params?.collection,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Obtain a list of all meanings with specified 'name'
   * @param {string} [name] -
   * @param {string} [collection] -
   * @returns {Promise<HttpResponse<Meaning[]>>} Successful Response
   */
  async all(params?: AllParams, requestConfig?: RequestConfig): Promise<HttpResponse<Meaning[]>> {
    const request = new RequestBuilder<Meaning[]>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/meanings/all/get')
      .setRequestSchema(z.any())
      .setResponseSchema(z.array(meaningResponse))
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'name',
        value: params?.name,
      })
      .addQueryParam({
        key: 'collection',
        value: params?.collection,
      })
      .build();
    return this.client.call<Meaning[]>(request);
  }

  /**
   * Remove previously set and add new meanings with specified 'name' fileds with values from 'values' fileds of provided list
   * @param {string} [collection] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async update(body: Meaning[], params?: UpdateParams, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('PUT')
      .setPath('/meanings/all/update')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'collection',
        value: params?.collection,
      })
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Remove all values for specified 'name'
   * @param {string} [name] -
   * @param {string} [value] -
   * @param {string} [collection] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async remove(params?: RemoveParams, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('DELETE')
      .setPath('/meanings/all/remove')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'name',
        value: params?.name,
      })
      .addQueryParam({
        key: 'value',
        value: params?.value,
      })
      .addQueryParam({
        key: 'collection',
        value: params?.collection,
      })
      .build();
    return this.client.call<any>(request);
  }

  /**
   * Display a list of all meanings with specified 'name'
   * @param {string} [name] -
   * @param {string} [collection] -
   * @param {string} [format] -
   * @returns {Promise<HttpResponse<any>>} Successful Response
   */
  async display(params?: DisplayParams, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const request = new RequestBuilder<any>()
      .setBaseUrl(this.config)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/meanings/all/display')
      .setRequestSchema(z.any())
      .setResponseSchema(z.any())
      .setRequestContentType(ContentType.Json)
      .setResponseContentType(ContentType.Json)
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'name',
        value: params?.name,
      })
      .addQueryParam({
        key: 'collection',
        value: params?.collection,
      })
      .addQueryParam({
        key: 'format',
        value: params?.format,
      })
      .build();
    return this.client.call<any>(request);
  }
}

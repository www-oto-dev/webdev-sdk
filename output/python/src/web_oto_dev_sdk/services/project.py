# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import Property, PropertyCreate, PropertyUpdate


class ProjectService(BaseService):

    @cast_models
    def read_project_properties_project_project_slug_properties_get(
        self, project_slug: str
    ) -> List[Property]:
        """read_project_properties_project_project_slug_properties_get

        :param project_slug: project_slug
        :type project_slug: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: List[Property]
        """

        Validator(str).validate(project_slug)

        serialized_request = (
            Serializer(
                f"{self.base_url}/project/{{project_slug}}/properties/",
                self.get_default_headers(),
            )
            .add_path("project_slug", project_slug)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return [Property._unmap(item) for item in response]

    @cast_models
    def create_project_property_project_project_slug_properties_post(
        self, request_body: PropertyCreate, project_slug: str
    ) -> Property:
        """create_project_property_project_project_slug_properties_post

        :param request_body: The request body.
        :type request_body: PropertyCreate
        :param project_slug: project_slug
        :type project_slug: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: Property
        """

        Validator(PropertyCreate).validate(request_body)
        Validator(str).validate(project_slug)

        serialized_request = (
            Serializer(
                f"{self.base_url}/project/{{project_slug}}/properties/",
                self.get_default_headers(),
            )
            .add_path("project_slug", project_slug)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Property._unmap(response)

    @cast_models
    def get_property_project_project_slug_properties_property_slug_get(
        self, project_slug: str
    ) -> List[Property]:
        """get_property_project_project_slug_properties_property_slug_get

        :param project_slug: project_slug
        :type project_slug: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: List[Property]
        """

        Validator(str).validate(project_slug)

        serialized_request = (
            Serializer(
                f"{self.base_url}/project/{{project_slug}}/properties/{property_slug}",
                self.get_default_headers(),
            )
            .add_path("project_slug", project_slug)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return [Property._unmap(item) for item in response]

    @cast_models
    def update_property_project_project_slug_properties_property_slug_put(
        self, request_body: PropertyUpdate, project_slug: str, property_slug: str
    ) -> Property:
        """update_property_project_project_slug_properties_property_slug_put

        :param request_body: The request body.
        :type request_body: PropertyUpdate
        :param project_slug: project_slug
        :type project_slug: str
        :param property_slug: property_slug
        :type property_slug: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: Property
        """

        Validator(PropertyUpdate).validate(request_body)
        Validator(str).validate(project_slug)
        Validator(str).validate(property_slug)

        serialized_request = (
            Serializer(
                f"{self.base_url}/project/{{project_slug}}/properties/{{property_slug}}",
                self.get_default_headers(),
            )
            .add_path("project_slug", project_slug)
            .add_path("property_slug", property_slug)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Property._unmap(response)

    @cast_models
    def delete_property_project_project_slug_properties_property_slug_delete(
        self, project_slug: str, property_slug: str
    ) -> Property:
        """delete_property_project_project_slug_properties_property_slug_delete

        :param project_slug: project_slug
        :type project_slug: str
        :param property_slug: property_slug
        :type property_slug: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Successful Response
        :rtype: Property
        """

        Validator(str).validate(project_slug)
        Validator(str).validate(property_slug)

        serialized_request = (
            Serializer(
                f"{self.base_url}/project/{{project_slug}}/properties/{{property_slug}}",
                self.get_default_headers(),
            )
            .add_path("project_slug", project_slug)
            .add_path("property_slug", property_slug)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return Property._unmap(response)

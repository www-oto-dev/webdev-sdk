// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const project = z.lazy(() => {
  return z.object({
    pid: z.string().optional().nullable(),
    slug: z.string().optional().nullable(),
    uid: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
  });
});

/**
 *
 * @typedef  {Project} project
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type Project = z.infer<typeof project>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const projectResponse = z.lazy(() => {
  return z
    .object({
      pid: z.string().optional().nullable(),
      slug: z.string().optional().nullable(),
      uid: z.string().optional().nullable(),
      title: z.string().optional().nullable(),
      description: z.string().optional().nullable(),
    })
    .transform((data) => ({
      pid: data['pid'],
      slug: data['slug'],
      uid: data['uid'],
      title: data['title'],
      description: data['description'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const projectRequest = z.lazy(() => {
  return z
    .object({
      pid: z.string().nullish(),
      slug: z.string().nullish(),
      uid: z.string().nullish(),
      title: z.string().nullish(),
      description: z.string().nullish(),
    })
    .transform((data) => ({
      pid: data['pid'],
      slug: data['slug'],
      uid: data['uid'],
      title: data['title'],
      description: data['description'],
    }));
});
